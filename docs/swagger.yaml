basePath: /
definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.accessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  controllers.defaultResponse:
    properties:
      message:
        type: string
    type: object
  models.Checkresponse:
    properties:
      is_response:
        type: boolean
    type: object
  models.GetRoutes:
    properties:
      all_price:
        type: integer
      client_id:
        type: integer
      distance:
        type: integer
      driver_id:
        type: integer
      from:
        type: string
      into:
        type: string
      is_deleted:
        type: boolean
      is_response:
        type: boolean
      pricekm:
        type: integer
    type: object
  models.GetTaxiComp:
    properties:
      company_title:
        type: string
      driver_id:
        type: integer
      is_deleted:
        type: boolean
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Rating:
    properties:
      rating:
        type: integer
    type: object
  models.Route:
    properties:
      distance:
        type: integer
      from:
        type: string
      into:
        type: string
      is_response:
        type: boolean
    type: object
  models.SwagSignIn:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.SwagSignUp:
    properties:
      full_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.TaxiComp:
    properties:
      company_title:
        type: string
      driver_id:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      full_name:
        type: string
      id:
        type: integer
      is_blocked:
        type: boolean
      is_deleted:
        type: boolean
      password:
        type: string
      rating:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8484
info:
  contact: {}
  description: API Server for Fellow traveler Application
  title: Fellow traveler API
  version: "1.0"
paths:
  /api/report:
    get:
      description: get list of report
      operationId: get-report
      parameters:
      - description: fill if you need search
        in: query
        name: q
        type: string
      - description: fill if you need search
        in: query
        name: is_response
        required: true
        type: boolean
      - description: fill if you need search
        in: query
        name: all_price
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetRoutes'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get Report
      tags:
      - report
  /api/routes:
    get:
      description: get list of all routes
      operationId: get-all-routes
      parameters:
      - description: fill if you need search
        in: query
        name: q
        type: string
      - description: fill if you need search
        in: query
        name: is_response
        required: true
        type: boolean
      - description: fill if you need search
        in: query
        name: all_price
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Route'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get All Routes
      tags:
      - routes
    post:
      consumes:
      - application/json
      description: create new route
      operationId: create-route
      parameters:
      - description: new route info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Create Route
      tags:
      - routes
  /api/routes/{id}:
    delete:
      description: delete route by ID
      operationId: delete-route-by-id
      parameters:
      - description: id of the route
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Delete Route By ID
      tags:
      - routes
    get:
      description: get route by ID
      operationId: get-route-by-id
      parameters:
      - description: id of the route
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Route'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get Route By ID
      tags:
      - routes
    patch:
      consumes:
      - application/json
      description: check as response existed route
      operationId: check-route-as-response
      parameters:
      - description: id of the route
        in: path
        name: id
        required: true
        type: integer
      - description: ' check route as response info'
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Checkresponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Check route as response
      tags:
      - routes
    put:
      consumes:
      - application/json
      description: update existed route
      operationId: update-route
      parameters:
      - description: id of the route
        in: path
        name: id
        required: true
        type: integer
      - description: route update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Update Route
      tags:
      - routes
  /api/taxicomps:
    get:
      description: get list of all taxi companies
      operationId: get-all-taxi-companies
      parameters:
      - description: fill if you need search
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetTaxiComp'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get All Taxi Companies
      tags:
      - taxi companies
    post:
      consumes:
      - application/json
      description: create new taxi company
      operationId: create-taxi-company
      parameters:
      - description: new taxicomp info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TaxiComp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Create Taxicomp
      tags:
      - taxi companies
  /api/taxicomps/{id}:
    delete:
      description: delete taxi company by ID
      operationId: delete-taxi-company-by-id
      parameters:
      - description: id of the taxi company
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Delete Taxi Company By ID
      tags:
      - taxi companies
    get:
      description: get taxi company by ID
      operationId: get-taxi-company-by-id
      parameters:
      - description: id of the taxicomp
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTaxiComp'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get Taxi Company By ID
      tags:
      - taxi companies
    put:
      consumes:
      - application/json
      description: update existed taxi company
      operationId: update-taxi-company
      parameters:
      - description: id of the taxi company
        in: path
        name: id
        required: true
        type: integer
      - description: taxi company update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TaxiComp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Update taxi Company
      tags:
      - taxi companies
  /api/users:
    get:
      description: get list of all users
      operationId: get-all-users
      parameters:
      - description: fill if you need search
        in: query
        name: q
        type: string
      - description: fill if you need search
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get All Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user
      operationId: create-user
      parameters:
      - description: new route info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Create User
      tags:
      - users
  /api/users/{id}:
    delete:
      description: delete user by ID
      operationId: delete-user-by-id
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Delete User By ID
      tags:
      - users
    get:
      description: get user by ID
      operationId: get-user-by-id
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Get user By ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: edit  rating existed user
      operationId: edit-users-rating
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      - description: edit users rating
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: edit user rating
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update existed user
      operationId: update-user
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      - description: user update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - AKA: []
      summary: Update User
      tags:
      - users
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: sign in to account
      operationId: sign-in-to-account
      parameters:
      - description: sign-in info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagSignUp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: SignUp
      tags:
      - auth
securityDefinitions:
  AKA:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
